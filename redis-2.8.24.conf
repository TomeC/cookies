# redis示例配置文件。
#
# 注意为了让redis启动时能读取到配置的文件，启动方式必须如下：
# ./redis-server /path/to/redis.conf
# 
# 注意单位：当指定内存的格式时，可能指定的大小是 1k 5GB 4M 等等
# 
# 1k => 1000 bytes
# 1kb => 1024 bytes
# 1m => 1000000 bytes
# 1mb => 1024*1024 bytes
# 1g => 1000000000 bytes
# 1gb => 1024*1024*1024 bytes
#
# 单位不区分大小写，因此 1GB 1Gb 1gB 是一样的
################################## INCLUDES ###################################

# 包括一个或多个配置文件。这很有用如果你有一个标准的模板配置运行在所有的 redis
# 服务器上，但是也需要一些特殊的配置。Include 方法可以包含其他的文件，所以你需
# 要明智的使用它。
#
# 注意"include"方法不会让 admin 或 Redis Sentinel 程序调用 "CONFIG REWRITE" 命令
# Redis总是使用最后一个处理的指令，所以最好把include方法放在最开始的地方，避免覆
# 盖在本文中配置的指令
#
# 如果你想通过 include 方法覆盖配置选项，最好把它放在最后一行。
# 注意：路径是相对redis执行程序的
#
# include /path/to/local.conf
# include /path/to/other.conf

################################ GENERAL  #####################################

# redis默认不是以守护进程的方式运行，配置'yes'就行了。
# 如果redis以守护进程的方式执行，它会把进程ID写在/var/run/redis.pid文件里。
daemonize yes

# 以守护进程运行时记录redis pid的文件可以在这里配置。
pidfile /home/wangk/redis/redis-2.8.24/redis.pid

# 指定接受连接的端口号，默认是6379.如果指定为0的话，就不监听TCP端口
port 2816

# TCP listen() backlog.【backlog不知道怎么翻译，可以理解为等待的数量】
#
# 在很高的并发请求环境下，你需要设置一个很高的backlog，以避免客户端连接问题，
# 注意Linux内核会把这个值写到/proc/sys/net/core/somaxconn文件里，如果想要得到期
# 望的效果，要确保增加somaxconn 和 tcp_max_syn_backlog的值

tcp-backlog 511

# 
# 默认情况下redis会监听服务器所有的可用的网络接口。你可能只要监听一个或几个接口，
# 可以使用"bind"来配置，格式如下：
#
# bind 192.168.1.100 10.0.0.1
# bind 127.0.0.1

# 指定Unix socket的接受连接的路径。默认不指定，如果没指定Redis是不会监听Unix socket
# 的
#
# unixsocket /tmp/redis.sock
# unixsocketperm 700

# 当客户端N秒空闲后关闭连接（0 不关闭）
timeout 0

# TCP 保持连接
# 如果不为0，默认情况下使用SO_KEEPALIVE发送TCP应答到客户端。有两个原因：
# 1）检测失效客户端
# 2）让中间的网络节点保持有效
# 在Linux系统中，在指定的值（单位秒）发送ACK确认消息。注意：关闭连接需要双倍的时间。
# 在其他的系统上这个值依赖内核配置。

# 一个合理的值是60秒
tcp-keepalive 0

# 指定服务器的日志等级
# 可以以下的其中一种：
# debug（很多信息，对开发和测试很有用）
# verbose（很多有用的信息，没debug级别那么多）
# notice（适量的信息，生产环境中需要的）
# warning（只打印很重要或紧急的信息）
loglevel notice

# 指定log名称。如果为空，redis会输出到标准输出上。注意：如果程序输出到标准输出上，
# 但程序运行在后台，日志会输出到/dev/null.
logfile "/home/wangk/redis/redis-2.8.24/log"

# 把 'syslog-enabled' 设置为 yes，就可以把redis的日志输出到系统日志里， ubuntu 系
# 统的系统日志在 /var/log/syslog 里。
#
# syslog-enabled no

# 指定系统日志里的前缀符号。
# syslog-ident redis

# 指定 syslog 设备。必须是USER或 LOCAL0 到 LOCAL7.
# syslog-facility local0

# 设置数据库的数量。默认使用DB 0，可以使用 select <dbid> 选择要用的数据库0 ~ N-1.
databases 16

################################ SNAPSHOTTING  ################################
#
# 保存数据到硬盘：
#
# 	save <seconds> <changes>
# 	如果在seconds秒内数据改变了changes 次，就保存数据库到硬盘。
# 	下面的例子会保存数据：
#	在900秒里如果有一个key改变了
#	在300秒里如果有10个key改变了
#	在60秒里如果有10000个key改变了
#
#	注意：只要注释掉所有的“save”行就可以不保存。也可以直接使用一个空字符串，比如：
#	save ""
#	
save 900 1
save 300 10
save 60 10000

# 默认情况下，如果需要保存RDB快照但是最近一次的后台保存失败，那么redis会停止接受
# 写操作。
# 
# 如果后台保存重新开始，那么redis会自动的重新接受写操作。
#
#如果你已经设置了合适的服务器监控程序和持久化，就可以让redis继续工作，即使遇到错误。 
stop-writes-on-bgsave-error yes

# 当写数据库的时候是否使用 LZF 压缩字符串对象？
# 默认设置为yes，在大多数情况下是有用的。如果你想节省CPU的话，可以设置为no，但可能
# 会让数据库变大，如果有可以压缩的值或键。
rdbcompression yes

# 5.0版本后的RDB文件在末尾家加上CRC64校验值。
# 这样可以防止文件损坏，但是在保存和加载的时候会消耗10%的性能，如果追求性能最大化，可
# 以取消这个选项。
# 没校验的 RDB 文件会把校验值置0，程序在加载的时候会跳过校验。
rdbchecksum yes

# 保存数据文件名
dbfilename dump.rdb

# 工作目录。
# 
# 根据上面 dbfilename 配置的文件名，数据文件会被写在这个目录下。
# 追加方式记录的文件也会在这个目录下。
# 必须指定一个目录而不是文件。
dir ./

################################# REPLICATION #################################
# 
# 主从复制。用slaveof命令让一个redis实例复制另一个reids服务器。理解redids的复制
# 需要知道下面几点：
# 1）redis复制时异步的，但是你可以让主服务器停止接受写操作，如果连接数没有达到配
#    置的个数。
# 2）如果从服务器失去连接一段时间时可以进行部分再同步的。你需要配置缓存的值。
# 3）复制是自动进行的，不需要用户干预。如果网络断开，从服务器会自动重连并再同步。
# 
# slaveof <masterip> <masterport>
# slaveof 10.2.50.230 2816

# 如果主服务器配置了密码保护<下面的"requirepass"配置的>从服务器需要在复制之前进
# 行验证，否则主服务器会拒绝请求。
#
# masterauth <master-password>

# When a slave loses its connection with the master, or when the replication
# is still in progress, the slave can act in two different ways:
#
# 1) if slave-serve-stale-data is set to 'yes' (the default) the slave will
#    still reply to client requests, possibly with out of date data, or the
#    data set may just be empty if this is the first synchronization.
#
# 2) if slave-serve-stale-data is set to 'no' the slave will reply with
#    an error "SYNC with master in progress" to all the kind of commands
#    but to INFO and SLAVEOF.
# 如果从服务器和主服务器断开连接或者正在进行复制，从服务器可以有不同的行为：
# 1）slave-serve-stale-data设置为yes（默认情况），从服务器可以接受客户端的请求，
#    但数据可能是旧的，或者为空如果是第一次同步的话。
# 2）slave-serve-stale-data设置为no，从服务器会回复"SYNC with master in progress" 
#    除了INFO和SLAVEOF这两个命令。 
#
slave-serve-stale-data yes

# 可以配置从服务器是否接受写操作。
# redis 2.6之后默认是只读的。
# 注意：只读的从服务器并不是不相信网络上的客户端，而是为了防止误用实例。从服务器仍然
# 暴露了一些管理的命令，比如CONFIG，DEBUG等。可以使用'rename-command'来屏蔽一些危险的
# 命令
#
slave-read-only yes

# 同步复制策略：磁盘和网络socket
# 
# -------------------------------------------------------
# 警告: 非磁盘复制只是实验性的
# -------------------------------------------------------
# 
# 新从服务器或者重连后不能进行部分同步的从服务器需要进行全同步。主服务器会把一个RDB
# 文件传给从服务器。传输以两种方式进行：
# 1）Disk-backed: 主服务器创建一个子进程把RDB文件写到磁盘上。然后父进程把这个文件传
#    给从服务器
# 2）DiskLess: 主服务器创建一个子进程直接把产生的RDB文件用socket方式传给从服务器。
#
# 使用Disk-backed方式会生成RDB文件，子进程把生成的文件传给队列中的从服务器。
# diskless方式：新的从服务器到来时会进入队列，然后创建一个新的连接当上一个结束的时候。
# 
# 当用diskless方式复制时，主服务器会等待一段时间（配置的），以让更多的从服务器到达并
# 让传输并行化。
#
# 如果磁盘很慢而且网络很快，diskless方式的复制更好。
repl-diskless-sync no

# 当从服务器用diskless方式复制时需要配置这个选项。主服务器等待一段时间，让更多的从服务器
# 连接进来，然后并发传输RDB文件，提高效率。
# 默认是5秒，设置为0的会传输会立即开始，不等待。
repl-diskless-sync-delay 5

# 从服务器PING主服务器的时间间隔
# repl-ping-slave-period 10

# 设置复制超时选项：
# 1）从服务器同步时的数据块传传输
# 2）主服务器向从服务器传输数据或ping超时
# 3）从服务器向主服务器传输数据超时（ping）
# 
# 确保repl-timeout的值比repl-ping-slave-period值大，否则在网络不好的情况下，一个超时会
# 被多次检测到。
# repl-timeout 60

# 从服务器同步之后TCP_NODELAY是否开启？
# 如果你选择yes，redis会发送小的TCP包，使用很少的带宽把数据发送给从服务器，但这会增加
# 从服务器的延时。
# 
# 如果你选择no，数据会发送到从服务器的时间会减少，但需要更大的带宽。

# 默认情况下redis已经优化了低延迟，但在一些高流量或者主-从服务器有很多网关，设置为yes是
# 个好的选择。
repl-disable-tcp-nodelay no

# 设置backlog的大小。backlog是从服务器断线的时间内保存发往从服务器的数据，当从服务器
# 重连后只需同步backlog的数据即可。backlog越大，部分同步允许的从服务器断线时间越长。
# backlog在最近的从服务器连接时分配空间。
# repl-backlog-size 1mb

# A value of 0 means to never release the backlog.
# 主服务器断开从服务器多久backlog被释放。配置的选项是最后一个从服务器断开指定秒后释放
# backlog缓存的数据。0表示不释放。
# 
# repl-backlog-ttl 3600

# 从服务器的优先级是一个整数，可以通过INFO输出查看。当主服务器断开后，Redis Sentinel
# 会根据这个优先级选出一个从服务器作为主服务器。
#
# 从服务器会从优先值低的从服务器作为主服务器。比如有优先值为10,100,25的3个从服务器实例，
# Sentinel会选择最低的那个优先值为10的作为主服务器。
# 0意味着不会被选中。默认是100。
slave-priority 100

# 可能需要如果从服务器的连接数量少于N，在M秒内拒绝接受写操作。N个从服务器需要是“online”
# 状态。
# lag秒是依据最后从从服务器收到的ping值来计算的，通常每秒发送一次。
# 这个选项并不担保N个从服务器会接受写入，但是会显式丢失写入，如果在指定的时间内没有足够
# 的从服务器。
# 假如要求最少3个从服务器在lag<=10秒内：
#
# min-slaves-to-write 3
# min-slaves-max-lag 10
# 设置为0会使该选项失效。
# 默认min-slaves-to-write为0，min-slaves-max-lag为10.

################################## SECURITY ###################################

# 当你不信任客户端时，可以要求客户端在发送任何命令时都验证密码。
# 为了向后兼容，这行应该注释掉，而且大多数人不需要验证。
# 警告：redis允许外界用户进行150k/s的密码输入。这意味着你需要提供高强度的密码，
# 以避免被破解。
# 客户端登录时使用 `-a passwd` 添加密码。
# requirepass foobared

# 在共享环境中可以重命名一些危险的命令。例如CONFIG命令可以重命名为一些很难猜测的
# 的名字，这样内部工具依然可以使用，但外界的普通用户就无法使用了。
#
# 例子：
# 
# rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52
#
# 也可以直接禁止使用某个命令，只需把它设为空字符串。例：
# # rename-command CONFIG ""
#
# 注意修改某些命令会被记录到AOF文件或者传输到从服务器而造成问题。
################################### LIMITS ####################################

# 设置客户端的最大连接。默认值是10000，如果没配置最大连接数，该值是最大文件描述符
# 数-32，剩下的留给系统内部使用。
# 如果新的连接超过最大限制，向客户端返回错误："max number of clients reached".
# maxclients 10000

# 不会使用超过指定的内存大小。
# 当内存超过指定的内存量时，redis会根据内存策略删除键值。
# 如果根据策略redis不能删除键，当redis收到像SET，LPUSH子类的命令会回复错误，但会
# 继续回复像GET这样的只读命令。
# 当redis作为LRU缓存或着作为严格限制大小的实例（使用'noeviction'策略）是很有用的。
# 警告：如果有从服务器的话最好设置一个比最大内存量小的值，因为还需要一些内存作为
# 作为发送缓存。
# maxmemory <bytes>

# 内存策略：当达到最大值时，redis如何移除key。有五种选择：
# volatile-lru -> 根据设置的生存时间使用LRU算法移除key
# allkeys-lru -> 根据LRU算法移除任何键
# volatile-random -> 在设置生存时间的键中随机删除
# allkeys-random -> 随机删除一个键
# volatile-ttl -> 删除剩下生存时间最小的
# noeviction -> 不移除，返回错误
# 注意：不管使用哪种策略，当没有可以被移除的键时都会返回错误。
# 默认值：
# maxmemory-policy volatile-lru

# LRU和最小TTL算法不是精确的算法（为了节省内存），所以你可以设置样本的大小。
# 默认情况下，redis会选择3个key中最小的。
# maxmemory-samples 3

############################## APPEND ONLY MODE ###############################

# 默认情况下，redis会通过异步的方式把数据导出到硬盘。大多数情况下，这种方式是
# 极好的，但是在redis进程挂掉或者断点的情况下，会导致最近几分钟的数据丢失。
#
# AOF（Append Only File）是一种更好的持久化选择。默认的同步方式可能会导致1秒左右的
# 数据丢失，如果在断电等情况下。
#
# AOF和RDB方式的持久化不会出现问题。如果AOF方式可用，它会在redis启动的时候载入AOF文件
# 这是一种更好的持久化方式。
#
# 通过http://redis.io/topics/persistence获取更多信息。
appendonly no

# 追加文件的名称（默认："appendonly.aof"）
appendfilename "appendonly.aof"

# fsync()让操作系统将数据立即写入磁盘而不是先缓存。有些系统是立即写入，而有些系统则
# 是尽可能快的写入。
#
# Redis支持三种不同的写入模式：
#
# no：不进行同步，让操作系统决定什么时候刷新数据。更快。
# always：每次调用write都会刷新数据。慢但安全。
# everysec：每秒同步一次。折中。
#
# 默认选项是"everysec"，这是对安全和速度的一种折中。至于选择哪种方式，取决于你的理解，
# 如果你选择no，就意味着让操作系统刷新数据到硬盘，你会获取更好的性能。或者可以使用
# "always"选项，相对于everysec这意味着更慢但更安全。
#
# 更多这方面的文章：http://antirez.com/post/redis-persistence-demystified.html
#
# 如果不确定，就是用"everysec"选项。
# appendfsync always
appendfsync everysec
# appendfsync no

# 当AOF刷新数据的策略被设置为always或everysec时，后台保存进程（BGSAVE或者AOF 
# log后台重写）需要大量占用I/O资源，在一些Liux配置下会出n现长时间阻塞的现象。
# 现在还无法修复这个问题，就算新开一个线程，依然会阻塞同步的写操作。
# 
# 为了减缓这种问题可以使用下面的选项来阻止在主线程进行BGSAVE或BGREWRITEAOF操作
# 时调用fsync()函数。
#
# 这意味着子进程在进行持久化保存时相当于使用"appendfsync none"选项。在实际情况下
# 这意味着可能最多丢失30秒的日志（Linux默认设置）。
#
# 如果存在延时的问题，可以把这个选项设为"yes"。否则设为"no"是安全的选择，在进行
# 持久化的时候。
no-appendfsync-on-rewrite no

# 自动重写AOF文件。
# 当AOF文件增长到指定的比例后，会自动调用BGREWRITEAOF重写AOF文件。
#
# 怎样工作：Redis会记住AOF文件的大小当最近一次重写的时候（如果没重写过，就是
# Redis启动时候AOF的大小）。这个基本大小和现在大小进行比较。如果现在的大小
# 超过了指定的比例，就会触发重写。当然你需要指定重写AOF文件的最小值，避免当文
# 件很小时会频繁重写。

auto-aof-rewrite-percentage 100
auto-aof-rewrite-min-size 64mb

# 在Redis启动的时候可能发现AOF文件被截断了，这种情况可能发生在Redis崩溃时，
# 尤其是ext4文件在挂载的时候没有设置data=ordered选项。
#
# Redis既可以在出现错误的时候直接退出，也可以尽可能的载入多的数据。可以在
# 下面的选项中配置。
#
# 如果aof-load-truncated选项被设置为yes，会自动发布一个log给客户端然后载入。
# 如果是no，服务器会终止并报错。用户必须手动redis-check-aof修复AOF文件才可以。
aof-load-truncated yes

################################ LUA SCRIPTING  ###############################

# lua脚本执行最大时长。
#
# 如果lua脚本执行时间超过最大时间，Redis会记录这个事件，并返回给查询一个错误。当
# 脚本超过最大时长，只有SCRIPT KILL和SHUTDOWN NOSAVE可用。第一个命令可以停止没有
# 调用write命令的脚本。第二个命令可以关闭系统以避免写命令出错而用户不想等待。
# 
# 设置为0或负值表示脚本拥有无限的执行时间，也没有警告。
lua-time-limit 5000

################################## SLOW LOG ###################################

# Redis Slow Log是一个查询超过指定执行时间的日志系统。这个执行时间不包括I/O操作
# 只包含命令执行的时间。
#
# 你可以设置slow log的两个选项，一个是执行时间，单位微秒。另一个是slow log的长度。
# 当一个新的命令被记录后，那个最旧的命令就会从日志队列中移除。
#
# 1000000微秒等于1秒。注意负数会使slow log失效，0表示记录每个命令。
slowlog-log-slower-than 10000

# 队列的长度没有限制。只是会消耗更多的内存。你可以使用SLOWLOG RESET命令回收内存。
slowlog-max-len 128

################################ LATENCY MONITOR ##############################

# 通过LATENCY命令用户可以打印图表和报告。系统只记录等于或大于latency-monitor-
# threshold值的操作。当值设为0，意味着关闭监控。
#
# 默认情况是关闭监控的，因为大多数情况下没有延时的问题，而且收集这些数据会影响
# 性能，虽然很小，但在高负载的时候还是有的。监控可以动态的打开，通过
# "CONFIG SET latency-monitor-threshold <milliseconds>"来设置。
latency-monitor-threshold 0

############################# Event notification ##############################

# Redis可以通过Pub/Sub通知客户端，文档：http://redis.io/topics/notifications。
# 如果Redis实例的键通知事件可用，当client删除数据库0的"foo"键时，服务器会通过
# Pub/Sub发布两条通知事件：
# PUBLISH __keyspace@0__:foo del
# PUBLISH __keyevent@0__:del foo
# Redis会通知下面的事件：
#  K     Keyspace events, published with __keyspace@<db>__ prefix.
#  E     Keyevent events, published with __keyevent@<db>__ prefix.
#  g     Generic commands (non-type specific) like DEL, EXPIRE, RENAME, ...
#  $     String commands
#  l     List commands
#  s     Set commands
#  h     Hash commands
#  z     Sorted set commands
#  x     Expired events (events generated every time a key expires)
#  e     Evicted events (events generated when a key is evicted for maxmemory)
#  A     Alias for g$lshzxe, so that the "AKE" string means all the events.
# notify-keyspace-events可以使用多个参数组合，为空表示禁用。
#
# 例子1：使用list和普通事件，可以设置如下：
#  notify-keyspace-events Elg
#
#  例子2: 获取键的过期事件消息__keyevent@0__:expired use:
#
#  notify-keyspace-events Ex
# 默认情况下这个功能时关闭的，因为大部分用户不使用，而且该功能也占用资源。如果你没
# 指定K或E，就不会有事件发送。
notify-keyspace-events ""

############################### ADVANCED CONFIG ###############################

# 当数据量很小没有超过指定的阈值时，Hash表使用一个高效的内存数据结构。
hash-max-ziplist-entries 512
hash-max-ziplist-value 64

# 和hash表类似，在数据量没有超过指定值的时候，链表会使用特殊的编码方式来节省控件。
list-max-ziplist-entries 512
list-max-ziplist-value 64

# 在成员都是十进制的64bit表示的整数时，set会使用一种特殊的存储结构。当set的大小
# 没有超过指定的值时，会使用这种结构。
set-max-intset-entries 512

# 和hash，list类似，有序set也有一种特殊的编码方式来节省空间，在有序set不超过下面
# 指定值的情况下。
zset-max-ziplist-entries 128
zset-max-ziplist-value 64

# HyperLogLog稀疏表示的直接限制。限制包括16字节的头部。当使用稀疏表示的HyperLogLog
# 超过指定的值，就会转为密集表示。
#
# 超过16000的值是没用的，因为在那之后密集表示更加节省内存。
#
# 建议值0 - 3000，这样在不减慢PFADD操作很多的情况下（O(N)），使用稀疏表示节省空间。
# 如果不关心CPU的话，这个值可以达到10000，但是考虑到内存空间，HyperLogLogs的基数大多
# 在0-15000之间。
hll-sparse-max-bytes 3000

# Active rehashing uses 1 millisecond every 100 milliseconds of CPU time in
# order to help rehashing the main Redis hash table (the one mapping top-level
# keys to values). The hash table implementation Redis uses (see dict.c)
# performs a lazy rehashing: the more operation you run into a hash table
# that is rehashing, the more rehashing "steps" are performed, so if the
# server is idle the rehashing is never complete and some more memory is used
# by the hash table.
#
# The default is to use this millisecond 10 times every second in order to
# actively rehash the main dictionaries, freeing memory when possible.
#
# If unsure:
# use "activerehashing no" if you have hard latency requirements and it is
# not a good thing in your environment that Redis can reply from time to time
# to queries with 2 milliseconds delay.
#
# use "activerehashing yes" if you don't have such hard requirements but
# want to free memory asap when possible.
# 
activerehashing yes

# The client output buffer limits can be used to force disconnection of clients
# that are not reading data from the server fast enough for some reason (a
# common reason is that a Pub/Sub client can't consume messages as fast as the
# publisher can produce them).
#
# The limit can be set differently for the three different classes of clients:
#
# normal -> normal clients including MONITOR clients
# slave  -> slave clients
# pubsub -> clients subscribed to at least one pubsub channel or pattern
#
# The syntax of every client-output-buffer-limit directive is the following:
#
# client-output-buffer-limit <class> <hard limit> <soft limit> <soft seconds>
#
# A client is immediately disconnected once the hard limit is reached, or if
# the soft limit is reached and remains reached for the specified number of
# seconds (continuously).
# So for instance if the hard limit is 32 megabytes and the soft limit is
# 16 megabytes / 10 seconds, the client will get disconnected immediately
# if the size of the output buffers reach 32 megabytes, but will also get
# disconnected if the client reaches 16 megabytes and continuously overcomes
# the limit for 10 seconds.
#
# By default normal clients are not limited because they don't receive data
# without asking (in a push way), but just after a request, so only
# asynchronous clients may create a scenario where data is requested faster
# than it can read.
#
# Instead there is a default limit for pubsub and slave clients, since
# subscribers and slaves receive data in a push fashion.
#
# Both the hard or the soft limit can be disabled by setting them to zero.
client-output-buffer-limit normal 0 0 0
client-output-buffer-limit slave 256mb 64mb 60
client-output-buffer-limit pubsub 32mb 8mb 60

# Redis calls an internal function to perform many background tasks, like
# closing connections of clients in timeout, purging expired keys that are
# never requested, and so forth.
#
# Not all tasks are performed with the same frequency, but Redis checks for
# tasks to perform according to the specified "hz" value.
#
# By default "hz" is set to 10. Raising the value will use more CPU when
# Redis is idle, but at the same time will make Redis more responsive when
# there are many keys expiring at the same time, and timeouts may be
# handled with more precision.
#
# The range is between 1 and 500, however a value over 100 is usually not
# a good idea. Most users should use the default of 10 and raise this up to
# 100 only in environments where very low latency is required.
hz 10

# When a child rewrites the AOF file, if the following option is enabled
# the file will be fsync-ed every 32 MB of data generated. This is useful
# in order to commit the file to the disk more incrementally and avoid
# big latency spikes.
aof-rewrite-incremental-fsync yes
